"use strict";(self.webpackChunkerdia_docs=self.webpackChunkerdia_docs||[]).push([[3510],{4137:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function m(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=i.createContext({}),l=function(e){var t=i.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=l(e.components);return i.createElement(p.Provider,{value:t},e.children)},f="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},s=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=m(e,["components","mdxType","originalType","parentName"]),f=l(n),s=a,u=f["".concat(p,".").concat(s)]||f[s]||d[s]||o;return n?i.createElement(u,r(r({ref:t},c),{},{components:n})):i.createElement(u,r({ref:t},c))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=s;var m={};for(var p in t)hasOwnProperty.call(t,p)&&(m[p]=t[p]);m.originalType=e,m[f]="string"==typeof e?e:a,r[1]=m;for(var l=2;l<o;l++)r[l]=n[l];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}s.displayName="MDXCreateElement"},473:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>m,toc:()=>l});var i=n(7462),a=(n(7294),n(4137));const o={id:"template_config_init_command",title:"Module: template/config/init-command",sidebar_label:"template/config/init-command",sidebar_position:0,custom_edit_url:null},r=void 0,m={unversionedId:"api/modules/template_config_init_command",id:"api/modules/template_config_init_command",title:"Module: template/config/init-command",description:"Variables",source:"@site/docs/api/modules/template_config_init_command.md",sourceDirName:"api/modules",slug:"/api/modules/template_config_init_command",permalink:"/erdia/api/modules/template_config_init_command",draft:!1,editUrl:null,tags:[],version:"current",sidebarPosition:0,frontMatter:{id:"template_config_init_command",title:"Module: template/config/init-command",sidebar_label:"template/config/init-command",sidebar_position:0,custom_edit_url:null},sidebar:"tutorialSidebar",previous:{title:"databases/processDatabase",permalink:"/erdia/api/modules/databases_processDatabase"},next:{title:"template/cosnt-enum/CE_TEMPLATE_NAME",permalink:"/erdia/api/modules/template_cosnt_enum_CE_TEMPLATE_NAME"}},p={},l=[{value:"Variables",id:"variables",level:2},{value:"default",id:"default",level:3},{value:"Defined in",id:"defined-in",level:4}],c={toc:l},f="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(f,(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"variables"},"Variables"),(0,a.kt)("h3",{id:"default"},"default"),(0,a.kt)("p",null,"\u2022 ",(0,a.kt)("inlineCode",{parentName:"p"},"Const")," ",(0,a.kt)("strong",{parentName:"p"},"default"),": ",(0,a.kt)("inlineCode",{parentName:"p"},'"{\\n  // directory for output files\\n  \\"output\\": \\"<%= it.config.output %>\\",\\n\\n  // typeorm dataSourcePath\\n  \\"data-source-path\\": \\"<%= it.config.dataSourceFile %>\\",\\n\\n  // type of generated document\\n  \\"components\\": <%~ JSON.stringify(it.config.components) %>,\\n\\n  // kind of document name\\n  // - db: database name from TypeORM\\n  // - app: application name from package.json\\n  \\"project-name\\": \\"<%= it.config.projectName %>\\",\\n\\n  // custom template file path. erdia are using [ETA](https://eta.js.org/) template engine\\n  <% if (it.config.templatePath != null) { %>\\n    \\"template-path\\": \\"<%= it.config.templatePath %>\\",\\n  <% } else { %>\\n    // \\"template-path\\": \\"\\",\\n  <% } %>\\n\\n  // erdia entity database file path\\n  \\"database-path\\": \\"<%= it.config.databasePath %>\\",\\n\\n  // erdia entity database file path\\n<% if (it.config.routeBasePath != null) { %>\\n  \\"route-base-path\\": \\"<%= it.config.routeBasePath %>\\",\\n<% } else { %>\\n  // \\"route-base-path\\": \\"\\",\\n<% } %>\\n\\n  // document version using package.json version or timestamp\\n  \\"version-from\\": \\"<%= it.config.versionFrom %>\\",\\n\\n  // If the versionFrom option set file, read the file from this path\\n<% if (it.config.versionFrom != null) { %>\\n  \\"version-path\\": \\"<%= it.config.versionPath %>\\",\\n<% } else { %>\\n  // \\"version-path\\": \\"\\",\\n<% } %>\\n\\n  // output format of generated documents\\n  // - html\\n  // - markdown\\n  // - pdf\\n  // - image\\n  \\"format\\": \\"<%= it.config.format %>\\",\\n\\n  // skip image file attachment in html document\\n  \\"skipImageInHtml\\": false,\\n\\n  // mermaid.js plugin theme configuration\\n  // @url https://mermaid-js.github.io/mermaid/#/Setup?id=theme\\n  \\"theme\\": \\"<%= it.config.theme %>\\",\\n\\n  // prettier config path\\n  // \\"prettier-config\\": \\"set your .prettierrc file path\\",\\n\\n  // title tag content that inside of html document\\n  // \\"title\\": \\"set title tag content in html document\\",\\n\\n  // ER diagram width, it will be set width css attribute\\n  // @format pdf, image\\n  <% if (it.config.format === \'pdf\' || it.config.format === \'image\') { -%>\\n  \\"width\\": \\"100%\\",\\n  <% } else { -%>\\n  // \\"width\\": \\"100%\\",\\n  <% } -%>\\n\\n  // puppeteer viewport width\\n  // @format pdf, image\\n  <% if (it.config.format === \'pdf\' || it.config.format === \'image\') { -%>\\n  \\"viewport-width\\": 1280,\\n  <% } else { -%>\\n  // \\"viewport-width\\": 1280,\\n  <% } -%>\\n\\n  // puppeteer viewport height\\n  // @format pdf, image\\n  <% if (it.config.format === \'pdf\' || it.config.format === \'image\') { -%>\\n  \\"viewport-height\\":  1440,\\n  <% } else { -%>\\n  // \\"viewport-height\\":  1440,\\n  <% } -%>\\n\\n  // puppeteer config file path\\n  // @format pdf, image\\n  // \\"puppeteer-config-path\\": \\"set your puppeteer configuration file path\\",\\n\\n  // Background color. Example: transparent, red, \'#F0F0F0\'. Optional. Default: white\\n  // @format pdf, image\\n  // \\"background-color\\": \\"#FFFFFF\\",\\n\\n  // ER diagram export image file format\\n  // @format image\\n  <% if (it.config.format === \'image\') { %>\\n  \\"image-format\\": \\"<%= it.config.imageFormat %>\\",\\n  <% } else { %>\\n  // \\"image-format\\": \\"svg\\",\\n  <% } %>\\n}"')),(0,a.kt)("h4",{id:"defined-in"},"Defined in"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/imjuni/erdia/blob/dbbce86/src/template/config/init-command.ts#L1"},"template/config/init-command.ts:1")))}d.isMDXComponent=!0}}]);